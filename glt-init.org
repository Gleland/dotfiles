* Packages
    #+BEGIN_SRC emacs-lisp
	(use-package auto-compile
	    :ensure t
            :config (auto-compile-on-load-mode)
	)
	(use-package org-bullets
	    :ensure t
	    :init
	    (add-hook 'org-mode-hook #'org-bullets-mode)
	)
	(use-package which-key
	    :ensure t
	    :config
	    (which-key-mode))
    #+END_SRC
* Evil
    #+BEGIN_SRC emacs-lisp
      (use-package evil
          :ensure t
          :config
              (evil-mode 1)
      )
      (use-package evil-leader 
          :ensure t
          :config
              (setq evil-leader/in-all-states 1)
              (global-evil-leader-mode)
              (evil-leader/set-leader "<SPC>")
              (evil-leader/set-key
                  "w" 'save-buffer
                  "x" 'helm-M-x
                  "n" 'evil-next-buffer
                  "p" 'evil-previous-buffer
                  "h" 'help-mode
              )
      )
      (use-package evil-search-highlight-persist
          :ensure t
          :config
              (global-evil-search-highlight-persist t)
      )
    #+END_SRC
* Preferences
    #+BEGIN_SRC emacs-lisp
    ;(setq explicit-shell-file-name "/bin/bash")
    (setq shell-file-name "bash")
    (setq shell-command-switch "-ic")
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq visible-bell 1)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none)
    (setq use-package-verbose t)
    (setq use-package-always-ensure t)
    (setq load-prefer-newer t)

    ;; code block settings
    ;; clipboard to work for a sane person
    (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))

    ;(defun paste-to-osx (text &optional push)
    ;(let ((process-connection-type nil))
    ;(let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
    ;(process-send-string proc text)
    ;(process-send-eof proc))))

    ;(setq interprogram-cut-function 'paste-to-osx)
    ;(setq interprogram-paste-function 'copy-from-osx) 
    (fset 'evil-visual-update-x-selection 'ignore)

    #+END_SRC
* Functions
    #+BEGIN_SRC emacs-lisp 
      (defun glt-reload-init-file ()
          (interactive)
          (load-file "~/.emacs.d/init.el")
      )
      (defun dev-desk ()
          (interactive)
          (let ((default-directory "/ssh:user@host:"))
          (shell)))
      ;; JSON tool - from http://irreal.org/blog/?p=354#comment-79015
      (defun json-format ()
          (interactive)
          (save-excursion
          (shell-command-on-region (mark) (point) "python -m json.tool" (buffer-name) t)
          )
      )
    #+END_SRC
* Key bindings
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c C-l") 'glt-reload-init-file)    ; Reload .emacs file
    #+END_SRC
* Theme Settings
    #+BEGIN_SRC emacs-lisp
      (load-theme 'leuven t) ;; https://github.com/fniessen/emacs-leuven-theme
      (use-package powerline-evil
          :ensure t
          :config
              (powerline-evil-vim-color-theme)
      )
    #+END_SRC
  
  
  

